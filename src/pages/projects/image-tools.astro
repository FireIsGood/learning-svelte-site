---
import MainLayout from "@layouts/MainLayout.astro";
import { Picture } from "astro-imagetools/components";
import { renderPicture } from "astro-imagetools/api";

let operatorList;

await fetch(
  "https://raw.githubusercontent.com/Kengxxiao/ArknightsGameData/master/en_US/gamedata/excel/character_table.json"
)
  .then((response) => response.json())
  .then((data) => {
    operatorList = Object.entries(data)
      .filter(([technicalName, data]) => {
        const operator = data as any;
        return (
          operator.profession !== "TOKEN" &&
          operator.profession !== "TRAP" &&
          technicalName !== "char_512_aprot"
        );
      })
      .map(([technicalName, data]) => {
        const operator = data as any;
        return {
          name: operator.name,
          image: `https://raw.githubusercontent.com/Aceship/Arknight-Images/main/avatars/${operator.phases[0].characterPrefabKey}.png`,
          rarity: operator.rarity,
        };
      })
      .sort((a, b) => a.name.localeCompare(b.name))
      .sort((a, b) => b.rarity - a.rarity)
      .slice(0, 15);
  });

const gridItem = await renderPicture({
  src: "https://picsum.photos/1024/768",
  alt: "A random image",
  format: ["avif", "webp"],
  fallbackFormat: "png",
  placeholder: "tracedSVG",
  includeSourceFormat: false,
  formatOptions: {
    tracedSVG: {
      function: "posterize",
      options: {
        blackOnWhite: false,
      },
    },
  },
  height: 300,
});

for (let operator of operatorList) {
  operator.image = await renderPicture({
    src: operator.image,
    alt: "A random image",
    format: ["avif", "webp"],
    fallbackFormat: "png",
    placeholder: "tracedSVG",
    includeSourceFormat: false,
    formatOptions: {
      tracedSVG: {
        function: "trace",
        options: {
          blackOnWhite: true,
          background: "transparent",
          color: "000",
          threshold: 254,
          fill: "spread",
        },
      },
    },
    height: 300,
  });
}

export const title = "Image Tools";
export const creationOrder = 12;
---

<MainLayout title={title}>
  <section>
    <p>Trying to use the Astro ImageTools thing</p>
    <hr /><div class="content">
      <p>A Local Image served via the <code>Picture</code> component</p>
      <div class="picture">
        <Picture
          src="/src/images/amogte.png"
          alt="A local image"
          format={["avif", "webp"]}
          placeholder="tracedSVG"
          formatOptions={{
            tracedSVG: {
              function: "posterize",
              options: {
                blackOnWhite: true,
              },
            },
          }}
        />
      </div>
      <p>
        Another, larger Local Image served via the <code>Picture</code> component
      </p>
      <div class="picture">
        <Picture
          src="/src/images/star-girl.jpg"
          alt="A local image"
          format={["avif", "webp"]}
          placeholder="tracedSVG"
          formatOptions={{
            tracedSVG: {
              function: "posterize",
              options: {
                blackOnWhite: false,
                background: "0c192a",
                fill: "mean",
              },
            },
          }}
          height={300}
        />
      </div>
      <p>A Remote Image served via the <code>Picture</code> component</p>
      <div class="picture">
        <Picture
          src="https://picsum.photos/1024/768"
          alt="A landscape image"
          format={["avif", "webp"]}
          fallbackFormat="png"
          placeholder="tracedSVG"
          includeSourceFormat={false}
          formatOptions={{
            tracedSVG: {
              function: "posterize",
              options: {
                blackOnWhite: false,
              },
            },
          }}
          height={300}
        />
      </div>
      <p>A grid of operator pictures</p>
      <div class="grid">
        <div class="grid-item">
          <Fragment set:html={gridItem.picture} />
          <Fragment set:html={gridItem.style} />
        </div>
        {
          Object.entries(operatorList).map(([techname, operator]) => (
            <div class="grid-item">
              <Fragment set:html={operator?.image.picture} />
              <Fragment set:html={operator?.image.style} />
            </div>
          ))
        }
      </div>
    </div>
  </section>
</MainLayout>

<style lang="scss">
  section {
    > * + * {
      margin-top: 1rem;
    }
    > .content > * + * {
      margin-top: 1rem;
    }
  }

  code {
    border-radius: 4px;
    padding: 1px 4px;
    color: white;
    background-color: #424242;
  }

  // Main styles

  .content {
    text-align: center;
  }

  .picture {
    display: flex;
    justify-content: center;
  }

  .grid {
    padding: 1rem;
    gap: 0.5rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, 72px);
    background-color: #4e342e;

    > .grid-item {
      width: 72px;
      height: 72px;
    }
  }
</style>
